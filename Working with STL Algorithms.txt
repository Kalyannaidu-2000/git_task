#include <iostream> 

#include <vector> 

#include <algorithm> 

#include <string> 

  

struct Control { 

    int id;            

    std::string type;   

    std::string state;   

}; 

  

int main() { 

  

    std::vector<Control> controls = { 

        {1, "button", "visible"}, 

        {2, "slider", "invisible"}, 

        {3, "button", "disabled"}, 

        {4, "slider", "visible"}, 

        {5, "button", "visible"}, 

        {6, "slider", "disabled"}, 

        {7, "button", "invisible"}, 

        {8, "slider", "visible"}, 

        {9, "button", "disabled"}, 

        {10, "slider", "visible"} 

    }; 

  

    

    std::cout << "Control details:\n"; 

    std::for_each(controls.begin(), controls.end(), [](const Control& ctrl) { 

        std::cout << "ID: " << ctrl.id << ", Type: " << ctrl.type << ", State: " << ctrl.state << "\n"; 

    }); 

  

  

    auto controlById = std::find_if(controls.begin(), controls.end(), [](const Control& ctrl) { 

        return ctrl.id == 5; 

    }); 

    if (controlById != controls.end()) { 

        std::cout << "\nFound control with ID 5: Type: " << controlById->type 

                  << ", State: " << controlById->state << "\n"; 

    } else { 

        std::cout << "\nControl with ID 5 not found.\n"; 

    } 

  

  

    auto invisibleControl = std::find_if(controls.begin(), controls.end(), [](const Control& ctrl) { 

        return ctrl.state == "invisible"; 

    }); 

    if (invisibleControl != controls.end()) { 

        std::cout << "\nFirst invisible control: ID " << invisibleControl->id 

                  << ", Type: " << invisibleControl->type << "\n"; 

    } else { 

        std::cout << "\nNo invisible controls found.\n"; 

    } 

  

     auto sameStateControl = std::adjacent_find(controls.begin(), controls.end(), [](const Control& a, const Control& b) { 

        return a.state == b.state; 

    }); 

    if (sameStateControl != controls.end()) { 

        std::cout << "\nFound adjacent controls with the same state: ID " << sameStateControl->id 

                  << " and ID " << (sameStateControl + 1)->id << "\n"; 

    } else { 

        std::cout << "\nNo adjacent controls with the same state found.\n"; 

    } 

  

   

    int visibleCount = std::count_if(controls.begin(), controls.end(), [](const Control& ctrl) { 

        return ctrl.state == "visible"; 

    }); 

    std::cout << "\nNumber of visible controls: " << visibleCount << "\n"; 

  

      int disabledSlidersCount = std::count_if(controls.begin(), controls.end(), [](const Control& ctrl) { 

        return ctrl.type == "slider" && ctrl.state == "disabled"; 

    }); 

    std::cout << "Number of disabled sliders: " << disabledSlidersCount << "\n"; 

  

      std::vector<Control> controlSubrange1 = { 

        {1, "button", "visible"}, 

        {2, "slider", "invisible"}, 

        {3, "button", "disabled"} 

    }; 

    std::vector<Control> controlSubrange2 = { 

        {1, "button", "visible"}, 

        {2, "slider", "invisible"}, 

        {3, "button", "disabled"} 

    }; 

    bool areSubrangesEqual = std::equal(controlSubrange1.begin(), controlSubrange1.end(), 

                                        controlSubrange2.begin()); 

    std::cout << "\nSubranges are " << (areSubrangesEqual ? "identical" : "different") << ".\n"; 

  

    return 0; 

} 